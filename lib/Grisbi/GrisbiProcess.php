<?php

/**
 *
 * NCGrisbi APP (Nextcloud)
 *
 * @author Mohamed-Ismail MEJRI <imejri@hotmail.com>
 *
 * @copyright Copyright (c) 2025 Mohamed-Ismail MEJRI
 *
 * @license GNU AGPL version 3 or any later version
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

declare(strict_types=1);

namespace OCA\NCGrisbi\Grisbi;

use function OCP\Log\logger;

class GrisbiProcess
{
    private $pythonScriptPath;
    private $process;
    private $password;

    public function __construct()
    {
        $this->pythonScriptPath = __DIR__ . '/../bin/grisbi.py';
        $this->process = null;
        $this->password = null;
    }

    /**
     * Runs the Python program with the provided parameters and handles interactive prompts.
     *
     * @param array $parameters The parameters to pass to the Python script
     * @param $inputfile (Optional) input file to stdin
     * @param callable $inputHandler (Optional) Callback to handle input prompts
     * @return string The output generated by the Python script
     * @throws \RuntimeException If the Python script fails to execute
     */
    public function run(array $parameters = [], $inputfile = null, callable $inputHandler = null): string
    {
        if (is_null($inputHandler)) {
            $inputHandler = function ($prompt) {
                if (strpos($prompt, 'Password:') !== false) {
                    if (!$this->password) {
                        throw new \RuntimeException('Password required, but none was provided.');
                    }
                    return $this->password . PHP_EOL;
                }
                // Handle other prompts if needed
                throw new \RuntimeException("Unhandled prompt: $prompt");
            };
        }

        $command = 'python3 ' . escapeshellarg(realpath($this->pythonScriptPath));
        if (!empty($parameters)) {
            $command .= ' ' . implode(' ', array_map('escapeshellarg', $parameters));
        }

        $descriptors = [
            0 => ['pipe', 'r'], // stdin
            1 => ['pipe', 'w'], // stdout
            2 => ['pipe', 'w'], // stderr
        ];

        $this->process = proc_open($command, $descriptors, $pipes, null, null);

        if (!$this->process) {
            throw new \RuntimeException('Failed to execute Python script.');
        }

        $output = '';
        $outputHandle = $pipes[1];
        $inputHandle = $pipes[0];
        $errorHandle = $pipes[2];

        while (proc_get_status($this->process)['running'] == false) {
            usleep(100000);
        }
        if ($inputfile) {
            fwrite($inputHandle, $inputfile);
            fclose($inputHandle);
        }

        // Read output and check for prompts
        $this->monitorProcess($outputHandle, $inputHandle, $errorHandle, $inputHandler, $output);

        // Close all pipes and wait for the process to terminate
        foreach ($pipes as $pipe) {
            if (is_resource($pipe)) {
                fclose($pipe);
            }
        }
        proc_close($this->process);

        //logger('ncgrisbi')->warning("response={$output}.");

        return $output;
    }

    private function monitorProcess($outputHandle, $inputHandle, $errorHandle, callable $inputHandler, &$output): void
    {
        // Set the streams to non-blocking
        stream_set_blocking($outputHandle, false);
        stream_set_blocking($errorHandle, false);

        $checkPassword = false;
        $running = true;
        while ($running || !feof($outputHandle) || !feof($errorHandle)) {
            $running = proc_get_status($this->process)['running'];

            // Read from stdout
            if (!feof($outputHandle)) {
                $outputChunk = fread($outputHandle, 16384);
                if (($outputChunk !== false)&&( $outputChunk !== '')) {
                    // Asking Password allways first
                    if ($checkPassword) {
                        if ($this->handlePrompts($outputChunk, $inputHandle, $inputHandler)) {
                            $output .= $outputChunk;
                        }
                        $checkPassword = false;
                    } else {
                        $output .= $outputChunk;
                    }
                }
            }

            // Read from stderr
            if (!feof($errorHandle)) {
                $errorChunk = fread($errorHandle, 1024);
                if (($errorChunk !== false)&&( $errorChunk !== '')) {
                    logger('ncgrisbi')->warning("GrisibiProcess={$errorChunk}.");
                }
            }

            // Yield execution to avoid blocking
            usleep(100000);
        }
    }

    private function handlePrompts($outputChunk, $inputHandle, callable $inputHandler): bool
    {
        // Look for common password prompts
        $prompts = [
            '/.*Password: */i',
            '/.*Enter password: */i',
        ];

        foreach ($prompts as $pattern) {
            if (preg_match($pattern, $outputChunk)) {
                $response = $inputHandler(trim($outputChunk));
                fwrite($inputHandle, $response);
                return false;
            }
        }
        return true;
    }

    private function processRunning(): bool
    {
        $status = proc_get_status($this->process);
        return (bool)$status['running'];
    }
    /**
     * Sets the password to use for prompts.
     *
     * @param string $password The password to use
     */
    public function setPassword(string $password): void
    {
        $this->password = $password;
    }

    /**
     * Sets a custom input handler for specific prompts.
     *
     * @param callable $inputHandler The function to handle prompts
     */
    public function setInputHandler(callable $inputHandler): void
    {
        $this->inputHandler = $inputHandler;
    }

    /**
     * Runs the Grisbi script to check the specified GSB file.
     *
     * @param string $filePath The path to the GSB file to check.
     * @return string The output from the Grisbi script.
     * @throws \RuntimeException If the script execution fails.
     */
    public function checkGSBFile(string $filePath): string
    {
        return $this->run(['--check-file', '-'], $filePath);
    }

    /**
     * Retrieves a list of accounts from the specified GSB file.
     *
     * @param string $filePath The path to the GSB file.
     * @return string The list of accounts as returned by the Grisbi script.
     * @throws \RuntimeException If the script execution fails.
     */
    public function getAccounts(string $filePath): string
    {
        return $this->run(['--list-accounts', '--pass-word', $this->password, '-'], $filePath);
    }

    /**
     * Retrieves a list of parties from the specified GSB file.
     *
     * @param string $filePath The path to the GSB file.
     * @return string The list of parties as returned by the Grisbi script.
     * @throws \RuntimeException If the script execution fails.
     */
    public function getParties(string $filePath): string
    {
        return $this->run(['--list-parties', '--pass-word', $this->password, '-'], $filePath);
    }

    /**
     * Retrieves a list of categories from the specified GSB file.
     *
     * @param string $filePath The path to the GSB file.
     * @return string The list of categories as returned by the Grisbi script.
     * @throws \RuntimeException If the script execution fails.
     */
    public function getCategories(string $filePath): string
    {
        return $this->run(['--list-categories', '--pass-word', $this->password, '-'], $filePath);
    }

    /**
     * Retrieves a list of transactions from the specified GSB file.
     *
     * @param string $filePath The path to the GSB file.
     * @param int $accountId The account ID.
     * @return string The list of transactions as returned by the Grisbi script.
     * @throws \RuntimeException If the script execution fails.
     */
    public function getTransactions(string $accountId, string $filePath): string
    {
        return $this->run(['--list-transactions', $accountId, '--pass-word', $this->password, '-'], $filePath);
    }
}
